package{	import com.adobe.serialization.json.JSON;	import com.greensock.TweenLite;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.MotionBlurPlugin;	import com.greensock.plugins.TweenPlugin;		import components.GC;	import components.Group;	import components.HGroup;		import events.IOEvent;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.external.ExternalInterface;	import flash.net.URLVariables;	import flash.system.Security;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.ui.Keyboard;		import modules.*;		import net.CHub;	import net.IO;		import phase.CurrentPage;	import flash.text.TextFieldAutoSize;		[SWF(width="960", height="600", frameRate="24")]		public class ku6 extends Sprite	{				private const STAGE_WIDTH:uint = 960;		private const STAGE_HEIGHT:uint = 600;				private var bk:BKGround = new BKGround();		private var logo:Bitmap;		private var recentlyImg:Bitmap;		private var hotestImg:Bitmap;				private var setBtn:SetBtn = new SetBtn();		private var closeBtn:CloseBtn = new CloseBtn();		private var maxBtn:MaxBtn = new MaxBtn();		private var miniBtn:MiniBtn = new MiniBtn();		private var restoreBtn:RestoreBtn = new RestoreBtn();				private var indexBtn:IndexBtn = new IndexBtn();		private var movieBtn:MovieBtn = new MovieBtn();		private var tvBtn:TVBtn = new TVBtn();		private var ctBtn:CartoonBtn = new CartoonBtn();		private var rwBtn:RWBtn = new RWBtn();		private var playBtn:PlayBtn = new PlayBtn();				private var searchModule:SearchModule = new SearchModule();		private var cateMC:CateContainer = new CateContainer();		private var detailPage:DetailPageContainer = new DetailPageContainer();				private var indexList:IndexList = new IndexList();		private var listBox:HGroup = new HGroup();				private var btnBox:Group = new Group();		private var navBox:Group = new Group();				private var line:HorizonLine = new HorizonLine();				private var topBar:TopBar = new TopBar();				private var indexLeft:uint = 470;				private var indexColumn:uint = 6;				private var io:IO = new IO();				private var loadingMC:LoadingMC = new LoadingMC();				private var coverList:Array; //专辑列表				private var currentState:String = CurrentPage.INDEX_PAGE;				private var scrollModule:ScrollModule = new ScrollModule();				private var preStep:Object = {};				private var childCateObj:URLVariables;				private var noRes:Sprite = new Sprite();		private var noResTxt:TextField = new TextField();		private var noResFormat:TextFormat = new TextFormat();				private var cateXML:XML;				private var backFromDetail:Boolean = false;				private var curSearchWord:String;				private var counter:uint = 0;				private var currentNum:uint;				private var cateWidth:uint = 142;		private var cateHeight:uint = 279;				private var INDEX_FRAME_NUM:uint = 12;		private var LIST_RAME_NUM:uint = 21;		private var SCROLL_MODULE_WIDTH:uint = 750;				private var recentlyWatchedList:Array;		private var recentlyWatchedPages:uint = 1;		private const recentlyWatchedNumPerPage = 12;		private const recentlyWatchedListMaxLength = 100;				private var curGQ:uint = 1;				//for c		private var chub:CHub = new CHub();				public function ku6()		{			super();			init();			addListener();		}		private function init():void{						TweenPlugin.activate([MotionBlurPlugin]);						addChild(bk);						Security.allowDomain("*");			Security.allowInsecureDomain("*");						//挂接C接口			ExternalInterface.addCallback("proxycall", chub.proxycall);			ExternalInterface.addCallback("hideTopBK", hideTopBK);			ExternalInterface.addCallback("showTopBK", showTopBK);			chub.myTrace("Hook C Interface");						noResFormat.color = 0xffffff;			noResFormat.size = 13;			noResFormat.bold = true;			noResFormat.leading = 5;						noResTxt.autoSize = TextFieldAutoSize.LEFT;			noResTxt.defaultTextFormat = noResFormat;						topBar.mouseChildren = false;			topBar.mouseEnabled = false;			topBar.y = -2;			topBar.x = 0;			addChild(topBar);						var nbd:BitmapData = new Logo();			logo = new Bitmap(nbd);			addChild(logo);			logo.x = 14;			logo.y = 1;						btnBox.addChildren(setBtn, closeBtn, maxBtn, miniBtn, restoreBtn);						setBtn.x = setBtn.y = 0;			miniBtn.x = setBtn.x + 25 + 5;			miniBtn.y = setBtn.y;						maxBtn.x = miniBtn.x + 25 + 5;			maxBtn.y = miniBtn.y;						restoreBtn.x = maxBtn.x;			restoreBtn.y = maxBtn.y;			restoreBtn.visible = false;						closeBtn.x = maxBtn.x + 25 + 5;			closeBtn.y = maxBtn.y;						btnBox.height = 27;			btnBox.x = STAGE_WIDTH - btnBox.width;			btnBox.y = 19;			this.addChild(btnBox);						navBox.addChildren(indexBtn, movieBtn, tvBtn, ctBtn, rwBtn);			indexBtn.mouseChildren = movieBtn.mouseChildren = tvBtn.mouseChildren = ctBtn.mouseChildren = rwBtn.mouseChildren = false;			indexBtn.buttonMode = movieBtn.buttonMode = tvBtn.buttonMode = ctBtn.buttonMode = rwBtn.buttonMode = true;			indexBtn.x = indexBtn.width / 2;			indexBtn.y = 0;			movieBtn.x = indexBtn.x + indexBtn.width / 2 + 10 + movieBtn.width / 2;			movieBtn.y = 0;			tvBtn.x = movieBtn.x + movieBtn.width / 2 + 10 + tvBtn.width / 2;			tvBtn.y = 0;			ctBtn.x = tvBtn.x + tvBtn.width / 2 + 10 + ctBtn.width / 2;			ctBtn.y = 0;			rwBtn.x = ctBtn.x + ctBtn.width / 2 + 10 + rwBtn.width / 2;			rwBtn.y = 0;						navBox.x = 20;			navBox.y = 70;			this.addChild(navBox);						searchModule.x = STAGE_WIDTH - 20 - searchModule.width;			searchModule.y = 45;			searchModule.searchBtn.buttonMode = true;			this.addChild(searchModule);						indexList.scaleX = indexList.scaleY = .8;			indexList.alpha = 0;			this.addChild(indexList);						this.addChild(loadingMC);			loadingMC.x = STAGE_WIDTH / 2 - loadingMC.width / 2;			loadingMC.y = STAGE_HEIGHT / 2 - loadingMC.height / 2;			loadingMC.alpha = 0;			showLoadingIcon();						cateMC.x = - cateMC.width - 50;			cateMC.y = STAGE_HEIGHT - cateMC.height - 50;			cateMC.visible = false;			this.addChild(cateMC);						currentState = CurrentPage.INDEX_PAGE;						loadXML();					}		private function addListener():void{						this.addEventListener(Event.ADDED_TO_STAGE, addOtherListener);						setBtn.addEventListener(MouseEvent.CLICK, setBtn_clickHandler);			closeBtn.addEventListener(MouseEvent.CLICK, closeBtn_clickHandler);			maxBtn.addEventListener(MouseEvent.CLICK, maxBtn_clickHandler);			miniBtn.addEventListener(MouseEvent.CLICK, miniBtn_clickHandler);			restoreBtn.addEventListener(MouseEvent.CLICK, restoreBtn_clickHandler);											}		private function addOtherListener(event:Event):void{			chub.UpdatePlayerSize();						this.removeEventListener(Event.ADDED_TO_STAGE, addOtherListener);			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.addEventListener(Event.RESIZE, updateInterface);						scrollModule.addEventListener(IOEvent.FLIP_PAGE, flipPage_handler);			this.addChild(scrollModule);			scrollModule.visible = false;			scrollModule.x = STAGE_WIDTH / 2 - 750 / 2;			scrollModule.y = STAGE_HEIGHT + 50;						this.addEventListener(MouseEvent.MOUSE_UP, stopScroll);						//getIndexData();			indexBtn.addEventListener(MouseEvent.MOUSE_OVER, navMouse_overHandler);			indexBtn.addEventListener(MouseEvent.MOUSE_OUT, navMouse_outHandler);			indexBtn.addEventListener(MouseEvent.CLICK, gotoIndexPage);						movieBtn.addEventListener(MouseEvent.MOUSE_OVER, navMouse_overHandler);			movieBtn.addEventListener(MouseEvent.MOUSE_OUT, navMouse_outHandler);			movieBtn.addEventListener(MouseEvent.CLICK, gotoMoviePage);						tvBtn.addEventListener(MouseEvent.MOUSE_OVER, navMouse_overHandler);			tvBtn.addEventListener(MouseEvent.MOUSE_OUT, navMouse_outHandler);			tvBtn.addEventListener(MouseEvent.CLICK, gotoTVPage);						ctBtn.addEventListener(MouseEvent.MOUSE_OVER, navMouse_overHandler);			ctBtn.addEventListener(MouseEvent.MOUSE_OUT, navMouse_outHandler);			ctBtn.addEventListener(MouseEvent.CLICK, gotoCTPage);						rwBtn.addEventListener(MouseEvent.MOUSE_OVER, navMouse_overHandler);			rwBtn.addEventListener(MouseEvent.MOUSE_OUT, navMouse_outHandler);			rwBtn.addEventListener(MouseEvent.CLICK, gotoRWPage);						searchModule.searchTxt.addEventListener(KeyboardEvent.KEY_DOWN, enterToSearch);			searchModule.searchBtn.addEventListener(MouseEvent.CLICK, searchBtn_mouseClick_handler);						chub.addEventListener(IOEvent.C_DATA_IN, pushToRecentlyWatched);			chub.addEventListener(IOEvent.START_MOTION, getIndexData);						ExternalInterface.call("kuskinloadover",null,null);		}		private function stopScroll(event:MouseEvent):void{						scrollModule.dropThumbBar();					}		private function pushToRecentlyWatched(event:IOEvent):void{			chub.myTrace("pushToRecentlyWatched");			chub.myTrace("pushToRecentlyWatched" +  event.result.toString());						var recentListStr:String = event.result.toString();			var ar:Array=recentListStr.split(";");						var finalArr:Array = [];			for(var i=0;i<ar.length;i++)			{				var ar1:Array=ar[ar.length-1-i].split("|");								finalArr.push(ar1);							}						chub.myTrace("Watchlist size:" + finalArr.length);			for each (var value:* in finalArr){				chub.myTrace("recentlyWatchlist:" + value);			}						recentlyWatchedList = finalArr.concat(recentlyWatchedList);			recentlyWatchedList.splice(recentlyWatchedListMaxLength+1);						recentlyWatchedPages = uint(recentlyWatchedList.length / recentlyWatchedNumPerPage) + 1;					}		private function loadXML():void{						io.addEventListener(IOEvent.XML_LOAD_COMPLETE, xmlLoad_completeHandler);			io.getCateXML();					}		private function xmlLoad_completeHandler(event:IOEvent):void{						io.removeEventListener(IOEvent.XML_LOAD_COMPLETE, xmlLoad_completeHandler);			cateXML = XML(event.result);					}		/************************************************ Searching ************************************************/		private function enterToSearch(event:KeyboardEvent):void{						if(event.keyCode == Keyboard.ENTER){								searchModule.searchBtn.dispatchEvent(new MouseEvent(MouseEvent.CLICK));							}					}		private function searchBtn_mouseClick_handler(event:MouseEvent):void{						if(searchModule.searchTxt.text != ""){								if(noRes.parent){									removeChild(noRes);								}				hideWidget();				clearCurPage();				currentState = CurrentPage.SEARCH_PAGE;								var urlVar:URLVariables = new URLVariables();				urlVar.q = encodeURI(searchModule.searchTxt.text);				urlVar.p = 1;				curSearchWord = encodeURI(searchModule.searchTxt.text)								io.addEventListener(IOEvent.SEARCH_RESULT, search_resultReceive);				io.getSearchResult(urlVar);								searchModule.searchTxt.text = "";							}					}		private function search_resultReceive(event:IOEvent):void{						io.removeEventListener(IOEvent.SEARCH_RESULT, search_resultReceive);			var obj:Object = JSON.decode(event.result.toString());						var arr:Array = obj.jujiList;						backFromDetail = false;						coverList = [];						if(!arr || !arr.length){								loadingMC.alpha = 0;				noResTxt.text = "抱歉，没有找到与 “"+curSearchWord+"” 有关的影视\n酷6建议您：\n1.在最大范围里搜索，立即试试；\n2.找到 “"+curSearchWord+"” 相关视频2个，立即查看；\n3.请缩短关键字的长度，以获得更多搜索结果；\n4.检查关键词是否输错再试试\n5.多个关键字请用空格隔开";								noRes.addChild(noResTxt);				addChild(noRes);				noRes.x = stage.stageWidth / 2 - noResTxt.textWidth / 2;				noRes.y = stage.stageHeight / 2 - noResTxt.textHeight / 2;				return;							}						while(indexList.numChildren > 0){								indexList.removeChildAt(indexList.numChildren - 1);							}			if(currentState != CurrentPage.SEARCH_PAGE){								return;							}			var len:uint = arr.length;			for(var i:uint = 0; i<len; i++){								var indexCover:IndexCover = new IndexCover();								indexCover.addEventListener(IOEvent.SHOW_DETAIL_PAGE, showDetailPage);				indexList.addChild(indexCover);								indexCover.x = (i % 6) * (indexCover.width + 14) - indexLeft;				indexCover.y = Math.floor(i / 6) * (indexCover.height + 40) + 30;								coverList.push(indexCover);							}			indexList.width = indexCover.width * 6 + 70;			indexList.height = indexCover.height * 2 + 40;			TweenLite.to(indexList, .6, {scaleX:1, scaleY:1, alpha:1, x:stage.stageWidth/2 - indexList.width/2 + indexLeft + 5				, y: (stage.stageHeight - navBox.y) / 2 - indexList.height / 2 + navBox.y - 30				, onComplete:addSearchData, onCompleteParams:[arr]});			if(obj.totalPages > 1){								scrollModule.numPerPage = len;				scrollModule.totalPage = obj.totalPages;				scrollModule.visible = true;				TweenLite.to(scrollModule, .5, {x:stage.stageWidth/2 - SCROLL_MODULE_WIDTH /2, y:stage.stageHeight - 50, ease:Cubic.easeOut, alpha:1});							}					}		private function addSearchData(arr:Array):void{						loadingMC.alpha = 0;			var len:uint = arr.length;			for(var i:uint=0; i<len; i++){								var o:Object = arr[i]				var oo:IndexCover = coverList[i];								var coverURL:String = o.coverUrl;				var filmDesc:String = o.filmdesc;				var filmName:String = o.title.substr(0,3)+"...";				var filmScore:Number = o.score;				var vid:Number = o.id;								oo.filmName = filmName;				oo.description = filmDesc;				oo.vid = vid;				oo.hd = o.hd;				oo.score = filmScore;				oo.coverURL = coverURL;							}			coverList = [];					}		/********************************************************************************************************/		private function navMouse_overHandler(event:MouseEvent):void{						var btn:MovieClip = event.target as MovieClip;			btn.gotoAndStop(2);					}		private function navMouse_outHandler(event:MouseEvent):void{						var btn:MovieClip = event.target as MovieClip;			btn.gotoAndStop(1);					}				private function getIndexData(event:IOEvent = null):void{			chub.myTrace("getIndexData");			listIndexFrame();			var urlVar:URLVariables = new URLVariables();			urlVar.m = "homePage";			io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, data_load_completeHandler);			io.getData(urlVar);					}				private function gotoIndexPage(event:MouseEvent):void{						if(currentState == CurrentPage.INDEX_PAGE){								return;							}			if(noRes.parent){								removeChild(noRes);							}			childCateObj = null;			this.addEventListener(IOEvent.MOTION_COMPLETE, getIndexPageData);			clearCurPage();			hideWidget();			currentState = CurrentPage.INDEX_PAGE;		}				private function getIndexPageData(event:IOEvent):void{						this.removeEventListener(IOEvent.MOTION_COMPLETE, getIndexPageData);			showLoadingIcon();			getIndexData();					}				private function gotoMoviePage(event:MouseEvent):void{						if(currentState == CurrentPage.MOVIE_PAGE){								return;							}			if(noRes.parent){								removeChild(noRes);							}			childCateObj = null;			this.addEventListener(IOEvent.MOTION_COMPLETE, getMoviePageData);			clearCurPage();			hideWidget();			cateMC.setCate(cateXML.channel.(@id == 1), 1);			currentState = CurrentPage.MOVIE_PAGE;					}		private function getMoviePageData(event:IOEvent):void{						this.removeEventListener(IOEvent.MOTION_COMPLETE, getMoviePageData);			listListFrame();			io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);			var urlVar:URLVariables = new URLVariables();			urlVar.m = "list";			urlVar.movieCategory = 1;			urlVar.pageIndex = 1;			urlVar.sort = 61;			showLoadingIcon();			io.getData(urlVar);					}		private function gotoTVPage(event:MouseEvent):void{						if(currentState == CurrentPage.TELEPLAY_PAGE){								return;							}			if(noRes.parent){								removeChild(noRes);							}			childCateObj = null;			this.addEventListener(IOEvent.MOTION_COMPLETE, getTVPageData);			clearCurPage();			hideWidget();			cateMC.setCate(cateXML.channel.(@id == 2), 1);			currentState = CurrentPage.TELEPLAY_PAGE;					}		private function getTVPageData(event:IOEvent):void{						this.removeEventListener(IOEvent.MOTION_COMPLETE, getTVPageData);			listListFrame();			io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);			var urlVar:URLVariables = new URLVariables();			urlVar.m = "list";			urlVar.movieCategory = 2;			urlVar.pageIndex = 1;			urlVar.sort = 61;			showLoadingIcon();			io.getData(urlVar);					}		private function gotoCTPage(event:MouseEvent):void{						if(currentState == CurrentPage.CARTOON_PAGE){								return;							}			if(noRes.parent){								removeChild(noRes);							}			childCateObj = null;			this.addEventListener(IOEvent.MOTION_COMPLETE, getCTPageData);			clearCurPage();			hideWidget();			cateMC.setCate(cateXML.channel.(@id == 3), 1);			currentState = CurrentPage.CARTOON_PAGE;					}		private function getCTPageData(event:IOEvent):void{						this.removeEventListener(IOEvent.MOTION_COMPLETE, getCTPageData);			listListFrame();			io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);			var urlVar:URLVariables = new URLVariables();			urlVar.m = "list";			urlVar.movieCategory = 3;			urlVar.pageIndex = 1;			showLoadingIcon();			io.getData(urlVar);					}		/******************************************************************************************/		private function gotoRWPage(event:MouseEvent):void{						if(currentState == CurrentPage.RECENTLY_WATCHED_PAGE){								return;							}			if(noRes.parent){								removeChild(noRes);							}			childCateObj = null;			this.addEventListener(IOEvent.MOTION_COMPLETE, getRWPageData);			clearCurPage();			hideWidget();			currentState = CurrentPage.RECENTLY_WATCHED_PAGE;					}		private function getRWPageData(event:IOEvent):void{						this.removeEventListener(IOEvent.MOTION_COMPLETE, getRWPageData);						listRWPage(1);					}		private function listRWPage(pid:uint):void{						loadingMC.alpha = 0;			backFromDetail = false;						coverList = [];						while(indexList.numChildren > 0){								indexList.removeChildAt(indexList.numChildren - 1);							}			if(currentState != CurrentPage.RECENTLY_WATCHED_PAGE){								return;							}			var arr:Array = this.getRecentlyWatchedByPid(pid);						var len:uint;			if(arr && arr.length){								len = arr.length							}else{								return;							}						for(var i:uint = 0; i<len; i++){								var indexCover:IndexCover = new IndexCover();								indexCover.addEventListener(IOEvent.SHOW_DETAIL_PAGE, showDetailPage);				indexList.addChild(indexCover);								indexCover.x = (i % 6) * (indexCover.width + 14) - indexLeft;				indexCover.y = Math.floor(i / 6) * (indexCover.height + 40) + 30;								coverList.push(indexCover);							}			indexList.width = indexCover.width * 6 + 70;			indexList.height = indexCover.height * 2 + 40;			TweenLite.to(indexList, .6, {scaleX:1, scaleY:1, alpha:1, x:stage.stageWidth/2 - indexList.width/2 + indexLeft + 5				, y: (stage.stageHeight - navBox.y) / 2 - indexList.height / 2 + navBox.y - 30				, onComplete:addRecentlyWatchedData, onCompleteParams:[len]});						if(recentlyWatchedPages > 1){								scrollModule.numPerPage = this.recentlyWatchedNumPerPage;				scrollModule.totalPage = this.recentlyWatchedPages;				scrollModule.visible = true;				TweenLite.to(scrollModule, .5, {x:stage.stageWidth/2 - SCROLL_MODULE_WIDTH/2, y:stage.stageHeight - 50, ease:Cubic.easeOut, alpha:1});							}					}		private function addRecentlyWatchedData(len:uint):void{						for(var i:uint=0; i<len; i++){								var o:Object = this.recentlyWatchedList[i]				var oo:IndexCover = coverList[i];								var coverURL:String = o[2];				var filmDesc:String = "";				var filmName:String = String(o[0]).substr(0,3)+"...";				//var filmScore:Number = o.score;				var vid:Number = i;								chub.myTrace("Recent:" + filmName);				oo.filmName = filmName;				oo.description = filmDesc;				oo.vid = vid;				//oo.score = filmScore;				oo.coverURL = coverURL;							}					}		/******************************************************************************************/		private function setBtn_clickHandler(event:MouseEvent):void{											}		private function closeBtn_clickHandler(event:MouseEvent):void{						ExternalInterface.call("cmd","closewindow",null); 					}		private function maxBtn_clickHandler(event:MouseEvent):void{						ExternalInterface.call("cmd","maxwindow2",null);					}		private function miniBtn_clickHandler(event:MouseEvent):void{						ExternalInterface.call("cmd","minwindow",null);					}		private function restoreBtn_clickHandler(event:MouseEvent):void{											}		private function updateInterface(event:Event):void{						bk.width = stage.stageWidth;			bk.height = stage.stageHeight;						topBar.width = stage.stageWidth;						btnBox.x = stage.stageWidth - btnBox.width;						loadingMC.x = stage.stageWidth / 2 - loadingMC.width / 2;			loadingMC.y = stage.stageHeight / 2 - loadingMC.height / 2;						searchModule.x = stage.stageWidth - 20 - searchModule.width;						noRes.x = stage.stageWidth / 2 - noResTxt.textWidth / 2;			noRes.y = stage.stageHeight / 2 - noResTxt.textHeight / 2;						cateMC.y = stage.stageHeight - cateMC.height - 50;						scrollModule.x = stage.stageWidth / 2 - 750 / 2;			if(!scrollModule.visible){								scrollModule.y = stage.stageHeight + 50;							}else{								scrollModule.y = stage.stageHeight - 50;							}						if(currentState == CurrentPage.DETAIL_PAGE){								detailPage.x = stage.stageWidth / 2 - detailPage.width / 2;				detailPage.y = stage.stageHeight / 2 - detailPage.height / 2 + 30;							}						if(currentState == CurrentPage.INDEX_PAGE || currentState == CurrentPage.RECENTLY_WATCHED_PAGE || currentState == CurrentPage.SEARCH_PAGE){								indexList.x = stage.stageWidth / 2 - indexList.width / 2 + indexLeft + 5;				indexList.y = (stage.stageHeight - navBox.y) / 2 - indexList.height / 2 + navBox.y - 30;							}						if(currentState == CurrentPage.MOVIE_PAGE || currentState == CurrentPage.TELEPLAY_PAGE || currentState == CurrentPage.CARTOON_PAGE){								listBox.x = (stage.stageWidth - cateWidth)/2 - (98 * 7 + 78) / 2 + cateWidth + cateMC.x;				listBox.y = stage.stageHeight/2 - (128 * 3 + 20) / 2;							}					}				private function listIndexFrame():void{						while(indexList.numChildren > 4){								indexList.removeChildAt(indexList.numChildren - 1);							}			chub.myTrace("currentState:" + currentState);						if(currentState != CurrentPage.INDEX_PAGE){								return;							}			backFromDetail = false;			coverList = [];			chub.myTrace("INDEX_FRAME_NUM ="+INDEX_FRAME_NUM);						for(var i:uint = 0; i < INDEX_FRAME_NUM; i++){								var indexCover:IndexCover = new IndexCover();								indexList.addChild(indexCover);								indexCover.x = (i % 6) * (indexCover.width + 14) - indexLeft;				indexCover.y = Math.floor(i / 6) * (indexCover.height + 40) + 30;								coverList.push(indexCover);							}			chub.myTrace("TweenLite to");			chub.myTrace("indexCover.width:" + indexCover.width);			chub.myTrace("indexCover.height:" + indexCover.height);						indexList.width = indexCover.width * 6 + 70;			indexList.height = indexCover.height * 2 + 40;						chub.myTrace("indexList.width:" + indexList.width);			chub.myTrace("indexList.height:" + indexList.height);			chub.myTrace("stage.stageWidth:" + stage.stageWidth);			chub.myTrace("indexLeft:" + indexLeft);						indexList.x = stage.stageWidth / 2 - indexList.width / 2 + indexLeft + 5;			indexList.y = navBox.y - 50;			chub.myTrace("indexList.x:" + indexList.x);			chub.myTrace("indexList.y:" + indexList.y);						TweenLite.to(indexList, .6, {scaleX:1, scaleY:1, alpha:1, x:stage.stageWidth/2 - indexList.width/2 + indexLeft + 5				, y: (stage.stageHeight - navBox.y) / 2 - indexList.height / 2 + navBox.y - 30});		}				//index page loaded				private function data_load_completeHandler(event:IOEvent):void{						io.removeEventListener(IOEvent.DATA_LOAD_COMPLETE, data_load_completeHandler);			loadingMC.alpha = 0;			if(!indexList.numChildren || !indexList){								listIndexFrame();							}			var obj:Object = JSON.decode(event.result.toString());			var hotList:Array = obj["hot"];			var newList:Array = obj["new"];			var arr:Array = hotList.concat(newList);			addMovieData(arr);			chub.myTrace("data_load_completeHandler");						/*var len:uint = arr.length;			for(var i:uint = 0; i<len; i++){								var indexCover:IndexCover = new IndexCover();								indexCover.addEventListener(IOEvent.SHOW_DETAIL_PAGE, showDetailPage);				indexList.addChild(indexCover);								indexCover.x = (i % 6) * (indexCover.width + 14) - indexLeft;				indexCover.y = Math.floor(i / 6) * (indexCover.height + 40) + 30;								coverList.push(indexCover);							}			indexList.width = indexCover.width * 6 + 70;			indexList.height = indexCover.height * 2 + 40;			indexList.x = stage.stageWidth / 2 - indexList.width / 2 + indexLeft + 5;			indexList.y = navBox.y - 50;			TweenLite.to(indexList, .6, {scaleX:1, scaleY:1, alpha:1, x:stage.stageWidth/2 - indexList.width/2 + indexLeft + 5				, y: (stage.stageHeight - navBox.y) / 2 - indexList.height / 2 + navBox.y - 30				, onComplete:addMovieData, onCompleteParams:[arr]});*/					}		private function addMovieData(arr:Array):void{						loadingMC.alpha = 0;			var len:uint = arr.length;			for(var i:uint=0; i<len; i++){								var o:Object = arr[i]				var oo:IndexCover = coverList[i];								oo.addEventListener(IOEvent.SHOW_DETAIL_PAGE, showDetailPage);								var coverURL:String = o.coverurl;				var filmDesc:String = o.filmdesc;				var filmName:String = o.title.substr(0,3)+"...";				var filmScore:Number = uint(o.totalScore / o.totalNum * 10) / 10;				var vid:Number = o.id;								oo.filmName = filmName;				oo.description = filmDesc;				oo.vid = vid;				oo.hd = o.gqSmart;				oo.score = filmScore;				oo.coverURL = coverURL;							}		}				private function listListFrame():void{						while(listBox.numChildren){								listBox.removeChildAt(listBox.numChildren - 1);							}			if(currentState != CurrentPage.MOVIE_PAGE && currentState != CurrentPage.TELEPLAY_PAGE && currentState != CurrentPage.CARTOON_PAGE){								return;							}			backFromDetail = false;			coverList = [];			addChild(listBox);						this.setChildIndex(this.cateMC, this.numChildren - 1);						for(var i:uint = 0; i < LIST_RAME_NUM; i++){								var listFrame:ListCover = new ListCover();								//listFrame.addEventListener(IOEvent.SHOW_DETAIL_PAGE, showDetailPage);				listBox.addChild(listFrame);								listFrame.x = ((i%7) * 2 - 3) * listFrame.width;				listFrame.y = - listFrame.height * 2 * (Math.floor(i/7)+1);				if(Math.floor(i/7) == 0){										listFrame.y = - listFrame.height * 3;									}				if(Math.floor(i/7) == 1){										listFrame.y = - listFrame.height * 2;									}				if(Math.floor(i/7) == 2){										listFrame.y = 420 + listFrame.height;									}				coverList.push(listFrame);								TweenLite.to(listFrame, .5, {x:(i%7)* (listFrame.width+13),					y:Math.floor(i/7) * (listFrame.height+10)+20, motionBlur:{strength:1, quality:1}, ease:Cubic.easeOut});							}			listBox.x = (stage.stageWidth - cateWidth)/2 - (98 * 7 + 78) / 2 + cateWidth + 10;			listBox.y = stage.stageHeight/2 - (128 * 3 + 20) / 2;					}				//list page loaded				private function listData_load_completeHandler(event:IOEvent):void{						io.removeEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);			loadingMC.alpha = 0;			if(!listBox.numChildren || !listBox){								listListFrame();							}						var obj:Object = JSON.decode(event.result.toString());			var arr:Array = obj["list"];			if(!arr.length){								this.hideLoadingIcon();				return;							}						cateMC.visible = true;			var totalPage:uint = obj["totalPage"];			scrollModule.totalPage = totalPage;			cateMC.addEventListener(IOEvent.CHILD_CATE, loadChildCate);			cateMC.addEventListener(IOEvent.ALL_MOVIE, loadAllMovie);			TweenLite.to(cateMC, .5, {x:10, ease:Cubic.easeOut, alpha:1});						if(totalPage > 1){								scrollModule.visible = true;				TweenLite.to(scrollModule, .5, {x:stage.stageWidth/2 - SCROLL_MODULE_WIDTH/2, y:stage.stageHeight - 50, ease:Cubic.easeOut, alpha:1});							}						var len:uint = arr.length;			currentNum = len;			addListMovieData(arr);		}		private function addListMovieData(arr:Array):void{						/*counter++;			if(counter < currentNum){								return;							}*/			loadingMC.alpha = 0;			var len:uint = arr.length;			for (var i:uint = 0; i < len; i++){								var o:Object = arr[i];				var oo:ListCover = coverList[i];								oo.addEventListener(IOEvent.SHOW_DETAIL_PAGE, showDetailPage);								var coverURL:String = o.coverurl;				var filmName:String = o.title.substr(0,3)+"...";				var filmScore:Number = uint(o.totalScore / o.totalNum * 10) / 10;				var vid:Number = o.id;								oo.coverURL = coverURL;				oo.filmName = filmName;				oo.hd = o.gqSmart;				oo.score = filmScore;				oo.vid = vid;							}			//counter = 0;								}		// 子分类点击 全部 		private function loadAllMovie(event:IOEvent):void{						childCateObj = null;						if(!backFromDetail){								scrollModule.resetScrollModule();							}			listListFrame();			io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);			var urlVar:URLVariables = new URLVariables();			urlVar.m = "list";			switch(currentState){								case CurrentPage.MOVIE_PAGE:					urlVar.movieCategory = 1;					break;				case CurrentPage.TELEPLAY_PAGE:					urlVar.movieCategory = 2;					break;				case CurrentPage.CARTOON_PAGE:					urlVar.movieCategory = 3;					break;							}			urlVar.pageIndex = 1;			urlVar.sort = 61;			showLoadingIcon();			io.getData(urlVar);					}		// 加载子分类		private function loadChildCate(event:IOEvent):void{						var id:* = event.result.name;			var curT:uint = event.result.curType;			if(!backFromDetail){								scrollModule.resetScrollModule();							}			switch(currentState){								case CurrentPage.MOVIE_PAGE:										listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar:URLVariables = new URLVariables();					urlVar.m = "list";					urlVar.movieCategory = 1;					urlVar.pageIndex = 1;										switch(curT){												case 1:							urlVar.sort = id;							break;						case 2:							urlVar.movieArea = id;							break;						case 3:							urlVar.publishYear = id;							break;						case 4:							urlVar.hd = id;							break;											}						urlVar.sortType = curT;					childCateObj = urlVar;					showLoadingIcon();					io.getData(urlVar);										break;				case CurrentPage.TELEPLAY_PAGE:										listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar:URLVariables = new URLVariables();					urlVar.m = "list";					urlVar.movieCategory = 2;					urlVar.pageIndex = 1;										switch(curT){												case 1:							urlVar.sort = id;							break;						case 2:							urlVar.movieArea = id;							break;						case 3:							urlVar.publishYear = id;							break;						case 4:							urlVar.hd = id;							break;											}						urlVar.sortType = curT;					childCateObj = urlVar;					showLoadingIcon();					io.getData(urlVar);										break;				case CurrentPage.CARTOON_PAGE:										listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar:URLVariables = new URLVariables();					urlVar.m = "list";					urlVar.movieCategory = 3;					urlVar.pageIndex = 1;										switch(curT){												case 1:							urlVar.sort = id;							break;						case 2:							urlVar.movieArea = id;							break;						case 3:							urlVar.publishYear = id;							break;						case 4:							urlVar.hd = id;							break;											}						urlVar.sortType = curT;					childCateObj = urlVar;					showLoadingIcon();					io.getData(urlVar);										break;							}					}				private function showDetailPage(event:IOEvent):void{						if(currentState == CurrentPage.RECENTLY_WATCHED_PAGE){								chub.CmdCall("proxyevent","listbtn","playhistory,"+event.result.vid);				return;							}			var urlVar:URLVariables = new URLVariables();			urlVar.m = event.result.m;			urlVar.fid = event.result.vid;			urlVar.hd = event.result.hd;			curGQ = event.result.hd;			trace("curGQ:"+curGQ);			io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, detailPage_loadComplete_handler);			io.getData(urlVar);					}				private function detailPage_loadComplete_handler(event:IOEvent):void{						backFromDetail = true;						io.removeEventListener(IOEvent.DATA_LOAD_COMPLETE, detailPage_loadComplete_handler);			//trace(event.result.toString());			var obj:Object = JSON.decode(event.result.toString());						//chub.CmdCall("proxyevent","listbtn","setupfidimg,"+obj.id+"|"+obj.pic.substr(7));						detailPage.addEventListener(IOEvent.DETAIL_PAGE_READY, displayDetailPage);			obj.gqSmart = curGQ;			detailPage.addInfo(obj);					}		private function displayDetailPage(event:IOEvent):void{						if(currentState != CurrentPage.DETAIL_PAGE){								preStep.page = currentState;								if(currentState != CurrentPage.INDEX_PAGE){										this.hideWidget();					preStep.curPage = this.scrollModule.curPage;									}							}			detailPage.removeEventListener(IOEvent.DETAIL_PAGE_READY, displayDetailPage);			detailPage.addEventListener(IOEvent.NEXT_DETAIL_PAGE, displayNextDetailPage);			addChild(detailPage);			detailPage.addEventListener(IOEvent.PRE_STEP, backToPreStep);			detailPage.x = stage.stageWidth + 50;			detailPage.y = stage.stageHeight / 2 - detailPage.height / 2 + 30;						clearCurPage();						this.searchModule.visible = false;			this.topBar.visible = false;			this.navBox.visible = false;						currentState = CurrentPage.DETAIL_PAGE;						TweenMax.to(bk, 1, {colorMatrixFilter:{brightness:0.2},blurFilter:{blurX:8, blurY:8}, onComplete:moveOutDetailPage});					}		private function displayNextDetailPage(event:IOEvent):void{						TweenLite.to(detailPage, .5, {x:-detailPage.width-50, ease:Cubic.easeInOut, onComplete:showNextDetailPage, onCompleteParams:[event.result]});					}		private function showNextDetailPage(o:Object):void{						detailPage.x = stage.stageWidth + 50;						var urlVar:URLVariables = new URLVariables();			urlVar.m = o.m;			urlVar.fid = o.vid;			urlVar.hd = o.hd;						this.showLoadingIcon();						io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, detailPage_loadComplete_handler);			io.getData(urlVar);								}		private function moveOutDetailPage():void{						this.hideLoadingIcon();			TweenLite.to(detailPage, .5, {x:stage.stageWidth/2-detailPage.width/2, ease:Cubic.easeOut});					}		private function backToPreStep(event:IOEvent):void{					TweenLite.to(detailPage, .6, {x:stage.stageWidth + 50, ease:Cubic.easeOut});			TweenMax.to(bk, 1, {colorMatrixFilter:{brightness:1},blurFilter:{blurX:0, blurY:0}});						currentState = preStep.page;						this.searchModule.visible = true;			this.topBar.visible = true;			this.navBox.visible = true;						showLoadingIcon();			switch(currentState){								case CurrentPage.INDEX_PAGE:					getIndexData();					break;				case CurrentPage.MOVIE_PAGE:					listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar:URLVariables = new URLVariables();					urlVar.m = "list";					urlVar.movieCategory = 1;					urlVar.pageIndex = preStep.curPage;					urlVar.sort = 61;					if(childCateObj){												urlVar = childCateObj;						urlVar.pageIndex = preStep.curPage;											}					io.getData(urlVar);					break;				case CurrentPage.TELEPLAY_PAGE:					listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar:URLVariables = new URLVariables();					urlVar.m = "list";					urlVar.movieCategory = 2;					urlVar.pageIndex = preStep.curPage;					urlVar.sort = 61;					if(childCateObj){												urlVar = childCateObj;						urlVar.pageIndex = preStep.curPage;											}					io.getData(urlVar);					break;				case CurrentPage.CARTOON_PAGE:					listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar:URLVariables = new URLVariables();					urlVar.m = "list";					urlVar.movieCategory = 3;					urlVar.pageIndex = preStep.curPage;					urlVar.sort = 61;					if(childCateObj){												urlVar = childCateObj;						urlVar.pageIndex = preStep.curPage;											}					io.getData(urlVar);					break;				case CurrentPage.SEARCH_PAGE:					var urlVar:URLVariables = new URLVariables();					urlVar.q = curSearchWord;					urlVar.p = preStep.curPage;										io.addEventListener(IOEvent.SEARCH_RESULT, search_resultReceive);					io.getSearchResult(urlVar);					break;				case CurrentPage.RECENTLY_WATCHED_PAGE:					this.getRecentlyWatchedByPid(urlVar.p);					break;							}					}					// flip page by the scroll module				private var tempPage:uint;				private function flipPage_handler(event:IOEvent):void{						tempPage = uint(event.result);			this.addEventListener(IOEvent.MOTION_COMPLETE, goFlipPage);			clearCurPage();					}		private function goFlipPage(event:IOEvent):void{						this.removeEventListener(IOEvent.MOTION_COMPLETE, goFlipPage);			switch(currentState){								case CurrentPage.MOVIE_PAGE:										currentState = CurrentPage.MOVIE_PAGE;					listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar:URLVariables = new URLVariables();					urlVar.m = "list";					urlVar.movieCategory = 1;					urlVar.pageIndex = tempPage;					urlVar.sort = 61;					if(childCateObj){												urlVar = childCateObj;						urlVar.pageIndex = tempPage;											}					showLoadingIcon();					io.getData(urlVar);										break;				case CurrentPage.TELEPLAY_PAGE:										currentState = CurrentPage.TELEPLAY_PAGE;					listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar1:URLVariables = new URLVariables();					urlVar1.m = "list";					urlVar1.movieCategory = 2;					urlVar1.pageIndex = tempPage;					urlVar1.sort = 61;					if(childCateObj){												urlVar = childCateObj;						urlVar.pageIndex = tempPage;											}					showLoadingIcon();					io.getData(urlVar1);										break;				case CurrentPage.CARTOON_PAGE:										currentState = CurrentPage.CARTOON_PAGE;					listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar2:URLVariables = new URLVariables();					urlVar2.m = "list";					urlVar2.movieCategory = 3;					urlVar2.pageIndex = tempPage;					urlVar2.sort = 61;					if(childCateObj){												urlVar = childCateObj;						urlVar.pageIndex = tempPage;											}					showLoadingIcon();					io.getData(urlVar2);										break;								case CurrentPage.SEARCH_PAGE:										currentState = CurrentPage.SEARCH_PAGE;					var urlVar3:URLVariables = new URLVariables();					urlVar3.q = curSearchWord;					urlVar3.p = tempPage;										io.addEventListener(IOEvent.SEARCH_RESULT, search_resultReceive);					io.getSearchResult(urlVar3);										break;				case CurrentPage.RECENTLY_WATCHED_PAGE:					currentState = CurrentPage.RECENTLY_WATCHED_PAGE;					this.listRWPage(uint(tempPage));					break;							}					}				// show / hide the loading movie clip				private function showLoadingIcon():void{						TweenLite.to(loadingMC, .3, {alpha:1});					}		private function hideLoadingIcon():void{						TweenLite.to(loadingMC, .2, {alpha:0});					}				//clear current page				private function clearCurPage():void{									if(currentState == CurrentPage.INDEX_PAGE || currentState == CurrentPage.SEARCH_PAGE || currentState == CurrentPage.RECENTLY_WATCHED_PAGE){								if(!indexList.numChildren){										removeMovieData();					return;									}				for each(var oo:IndexCover in coverList){										oo.removeEventListener(IOEvent.SHOW_DETAIL_PAGE,showDetailPage);					oo.removeMaskMC();									}								TweenLite.to(indexList, .6, {scaleX:.8, scaleY:.8, alpha:0, y: navBox.y - 50, onComplete:removeMovieData});							}else{								if(!coverList.length){										this.dispatchEvent(new IOEvent(IOEvent.MOTION_COMPLETE));									}				for(var i:uint = 0; i < coverList.length; i++){										var o:ListCover = coverList[i];					o.removeEventListener(IOEvent.SHOW_DETAIL_PAGE,showDetailPage);					o.removeMaskMC();					var toY:int;					if(Math.floor(i/7) == 0){												toY = - o.height * 3;											}					if(Math.floor(i/7) == 1){												toY = - o.height * 2;											}					if(Math.floor(i/7) == 2){												toY = 420 + o.height;											}					TweenLite.to(o, .5, {x:((i%7) * 2 - 3) * o.width, y:toY, alpha:0, motionBlur:{strength:0.3, quality:1}, ease:Cubic.easeOut, onComplete:countForComplete});									}							}			coverList = [];					}		private function countForComplete():void{						counter++;			if(counter == currentNum){								while(listBox.numChildren){										listBox.removeAllChildren();									}				this.dispatchEvent(new IOEvent(IOEvent.MOTION_COMPLETE));				counter = 0;							}					}		private function hideWidget():void{						if(!backFromDetail){								scrollModule.resetScrollModule();							}			TweenLite.to(cateMC, .3, {x:-cateMC.width - 20, alpha:0});			TweenLite.to(scrollModule,.3,{x:stage.stageWidth/2 - SCROLL_MODULE_WIDTH/2, y:stage.stageHeight + 50, alpha:0, onComplete:hideScrollModule});					}		private function removeMovieData():void{						while(indexList.numChildren){								indexList.removeChildAt(indexList.numChildren - 1);							}			this.dispatchEvent(new IOEvent(IOEvent.MOTION_COMPLETE));			GC.gc();					}		// call by external function		private function hideTopBK():void{						topBar.topBK.visible = false;					}		private function showTopBK():void{						topBar.topBK.visible = true;					}		private function getRecentlyWatchedByPid(pid:uint):Array{						if(recentlyWatchedList && recentlyWatchedList.length){								var arr:Array = recentlyWatchedList.slice((pid - 1) * recentlyWatchedNumPerPage, 12 + (pid - 1) * recentlyWatchedNumPerPage);				return arr;							}			return null;					}		private function hideScrollModule():void{						scrollModule.visible = false;					}	}﻿package{	import com.adobe.serialization.json.JSON;	import com.greensock.TweenLite;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.MotionBlurPlugin;	import com.greensock.plugins.TweenPlugin;		import components.GC;	import components.Group;	import components.HGroup;		import events.IOEvent;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.external.ExternalInterface;	import flash.net.URLVariables;	import flash.system.Security;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.ui.Keyboard;		import modules.*;		import net.CHub;	import net.IO;		import phase.CurrentPage;		[SWF(width="960", height="600", frameRate="24")]		public class ku6 extends Sprite	{				private const STAGE_WIDTH:uint = 960;		private const STAGE_HEIGHT:uint = 600;				private var bk:BKGround = new BKGround();		//private var logo:Bitmap;		private var recentlyImg:Bitmap;		private var hotestImg:Bitmap;				//private var setBtn:SetBtn = new SetBtn();		//private var closeBtn:CloseBtn = new CloseBtn();		//private var maxBtn:MaxBtn = new MaxBtn();		//private var miniBtn:MiniBtn = new MiniBtn();		//private var restoreBtn:RestoreBtn = new RestoreBtn();				private var indexBtn:IndexBtn = new IndexBtn();		private var movieBtn:MovieBtn = new MovieBtn();		private var tvBtn:TVBtn = new TVBtn();		private var ctBtn:CartoonBtn = new CartoonBtn();		private var rwBtn:RWBtn = new RWBtn();		private var playBtn:PlayBtn = new PlayBtn();				private var searchModule:SearchModule = new SearchModule();		private var cateMC:CateContainer = new CateContainer();		private var detailPage:DetailPageContainer = new DetailPageContainer();				private var indexList:IndexList = new IndexList();		private var listBox:HGroup = new HGroup();				//private var btnBox:Group = new Group();		private var navBox:Group = new Group();				private var line:HorizonLine = new HorizonLine();				//private var topBar:TopBar = new TopBar();				private var indexLeft:uint = 470;				private var indexColumn:uint = 6;				private var io:IO = new IO();				private var loadingMC:LoadingMC = new LoadingMC();				private var coverList:Array; //专辑列表				private var currentState:String = CurrentPage.INDEX_PAGE;				private var scrollModule:ScrollModule = new ScrollModule();				private var preStep:Object = {};				private var childCateObj:URLVariables;				private var cateXML:XML;				private var backFromDetail:Boolean = false;				private var curSearchWord:String;				private var counter:uint = 0;				private var currentNum:uint;				private var cateWidth:uint = 142;		private var cateHeight:uint = 279;				private var INDEX_FRAME_NUM:uint = 12;		private var LIST_RAME_NUM:uint = 21;		private var SCROLL_MODULE_WIDTH:uint = 750;				private var recentlyWatchedList:Array;		private var recentlyWatchedPages:uint = 1;		private const recentlyWatchedNumPerPage = 12;		private const recentlyWatchedListMaxLength = 100;				private var curGQ:uint = 1;				//for c		private var chub:CHub = new CHub();				public function ku6()		{			super();			init();			addListener();		}		private function init():void{			chub.UpdatePlayerSize();						TweenPlugin.activate([MotionBlurPlugin]);						addChild(bk);						Security.allowDomain("*");			Security.allowInsecureDomain("*");						//挂接C接口			ExternalInterface.addCallback("proxycall", chub.proxycall);			ExternalInterface.addCallback("hideTopBK", hideTopBK);			ExternalInterface.addCallback("showTopBK", showTopBK);			chub.myTrace("Hook C Interface");						/*topBar.mouseChildren = false;			topBar.mouseEnabled = false;			topBar.y = -2;			topBar.x = 0;			addChild(topBar);*/						/*var nbd:BitmapData = new Logo();			logo = new Bitmap(nbd);			addChild(logo);			logo.x = 14;			logo.y = 1;*/						//btnBox.addChildren(setBtn, closeBtn, maxBtn, miniBtn, restoreBtn);						/*setBtn.x = setBtn.y = 0;			miniBtn.x = setBtn.x + 25 + 5;			miniBtn.y = setBtn.y;*/						/*maxBtn.x = miniBtn.x + 25 + 5;			maxBtn.y = miniBtn.y;*/						/*restoreBtn.x = maxBtn.x;			restoreBtn.y = maxBtn.y;			restoreBtn.visible = false;*/						/*closeBtn.x = maxBtn.x + 25 + 5;			closeBtn.y = maxBtn.y;*/						/*btnBox.height = 27;			btnBox.x = STAGE_WIDTH - btnBox.width;			btnBox.y = 19;			this.addChild(btnBox);*/						navBox.addChildren(indexBtn, movieBtn, tvBtn, ctBtn, rwBtn);			indexBtn.mouseChildren = movieBtn.mouseChildren = tvBtn.mouseChildren = ctBtn.mouseChildren = rwBtn.mouseChildren = false;			indexBtn.buttonMode = movieBtn.buttonMode = tvBtn.buttonMode = ctBtn.buttonMode = rwBtn.buttonMode = true;			indexBtn.x = indexBtn.width / 2;			indexBtn.y = 0;			movieBtn.x = indexBtn.x + indexBtn.width / 2 + 10 + movieBtn.width / 2;			movieBtn.y = 0;			tvBtn.x = movieBtn.x + movieBtn.width / 2 + 10 + tvBtn.width / 2;			tvBtn.y = 0;			ctBtn.x = tvBtn.x + tvBtn.width / 2 + 10 + ctBtn.width / 2;			ctBtn.y = 0;			rwBtn.x = ctBtn.x + ctBtn.width / 2 + 10 + rwBtn.width / 2;			rwBtn.y = 0;						navBox.x = 20;			navBox.y = 30;			this.addChild(navBox);						searchModule.x = STAGE_WIDTH - 20 - searchModule.width;			searchModule.y = 10;			searchModule.searchBtn.buttonMode = true;			this.addChild(searchModule);						indexList.scaleX = indexList.scaleY = .8;			indexList.alpha = 0;			this.addChild(indexList);						this.addChild(loadingMC);			loadingMC.x = STAGE_WIDTH / 2 - loadingMC.width / 2;			loadingMC.y = STAGE_HEIGHT / 2 - loadingMC.height / 2;			loadingMC.alpha = 0;			showLoadingIcon();						cateMC.x = - cateMC.width - 50;			cateMC.y = STAGE_HEIGHT - cateMC.height - 50;			cateMC.visible = false;			this.addChild(cateMC);						currentState = CurrentPage.INDEX_PAGE;						loadXML();					}		private function addListener():void{						this.addEventListener(Event.ADDED_TO_STAGE, addOtherListener);						/*setBtn.addEventListener(MouseEvent.CLICK, setBtn_clickHandler);			closeBtn.addEventListener(MouseEvent.CLICK, closeBtn_clickHandler);			maxBtn.addEventListener(MouseEvent.CLICK, maxBtn_clickHandler);			miniBtn.addEventListener(MouseEvent.CLICK, miniBtn_clickHandler);			restoreBtn.addEventListener(MouseEvent.CLICK, restoreBtn_clickHandler);*/											}		private function addOtherListener(event:Event):void{									this.removeEventListener(Event.ADDED_TO_STAGE, addOtherListener);			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.addEventListener(Event.RESIZE, updateInterface);						scrollModule.addEventListener(IOEvent.FLIP_PAGE, flipPage_handler);			this.addChild(scrollModule);			scrollModule.visible = false;			scrollModule.x = STAGE_WIDTH / 2 - 750 / 2;			scrollModule.y = STAGE_HEIGHT + 50;						this.addEventListener(MouseEvent.MOUSE_UP, stopScroll);						//getIndexData();			indexBtn.addEventListener(MouseEvent.MOUSE_OVER, navMouse_overHandler);			indexBtn.addEventListener(MouseEvent.MOUSE_OUT, navMouse_outHandler);			indexBtn.addEventListener(MouseEvent.CLICK, gotoIndexPage);						movieBtn.addEventListener(MouseEvent.MOUSE_OVER, navMouse_overHandler);			movieBtn.addEventListener(MouseEvent.MOUSE_OUT, navMouse_outHandler);			movieBtn.addEventListener(MouseEvent.CLICK, gotoMoviePage);						tvBtn.addEventListener(MouseEvent.MOUSE_OVER, navMouse_overHandler);			tvBtn.addEventListener(MouseEvent.MOUSE_OUT, navMouse_outHandler);			tvBtn.addEventListener(MouseEvent.CLICK, gotoTVPage);						ctBtn.addEventListener(MouseEvent.MOUSE_OVER, navMouse_overHandler);			ctBtn.addEventListener(MouseEvent.MOUSE_OUT, navMouse_outHandler);			ctBtn.addEventListener(MouseEvent.CLICK, gotoCTPage);						rwBtn.addEventListener(MouseEvent.MOUSE_OVER, navMouse_overHandler);			rwBtn.addEventListener(MouseEvent.MOUSE_OUT, navMouse_outHandler);			rwBtn.addEventListener(MouseEvent.CLICK, gotoRWPage);						searchModule.searchTxt.addEventListener(KeyboardEvent.KEY_DOWN, enterToSearch);			searchModule.searchBtn.addEventListener(MouseEvent.CLICK, searchBtn_mouseClick_handler);						chub.addEventListener(IOEvent.C_DATA_IN, pushToRecentlyWatched);			chub.addEventListener(IOEvent.START_MOTION, getIndexData);						ExternalInterface.call("kuskinloadover",null,null);		}		private function stopScroll(event:MouseEvent):void{						scrollModule.dropThumbBar();					}		private function pushToRecentlyWatched(event:IOEvent):void{			chub.myTrace("pushToRecentlyWatched");			chub.myTrace("pushToRecentlyWatched" +  event.result.toString());						var recentListStr:String = event.result.toString();			var ar:Array=recentListStr.split(";");						var finalArr:Array = [];			for(var i=0;i<ar.length;i++)			{				var ar1:Array=ar[ar.length-1-i].split("|");								finalArr.push(ar1);							}						chub.myTrace("Watchlist size:" + finalArr.length);			for each (var value:* in finalArr){				chub.myTrace("recentlyWatchlist:" + value);			}						recentlyWatchedList = finalArr.concat(recentlyWatchedList);			recentlyWatchedList.splice(recentlyWatchedListMaxLength+1);						recentlyWatchedPages = uint(recentlyWatchedList.length / recentlyWatchedNumPerPage) + 1;					}		private function loadXML():void{						io.addEventListener(IOEvent.XML_LOAD_COMPLETE, xmlLoad_completeHandler);			io.getCateXML();					}		private function xmlLoad_completeHandler(event:IOEvent):void{						io.removeEventListener(IOEvent.XML_LOAD_COMPLETE, xmlLoad_completeHandler);			cateXML = XML(event.result);					}		/************************************************ Searching ************************************************/		private function enterToSearch(event:KeyboardEvent):void{						if(event.keyCode == Keyboard.ENTER){								searchModule.searchBtn.dispatchEvent(new MouseEvent(MouseEvent.CLICK));							}					}		private function searchBtn_mouseClick_handler(event:MouseEvent):void{						if(searchModule.searchTxt.text != ""){								hideWidget();				clearCurPage();				currentState = CurrentPage.SEARCH_PAGE;								var urlVar:URLVariables = new URLVariables();				urlVar.q = encodeURI(searchModule.searchTxt.text);				urlVar.p = 1;				curSearchWord = encodeURI(searchModule.searchTxt.text)								io.addEventListener(IOEvent.SEARCH_RESULT, search_resultReceive);				io.getSearchResult(urlVar);								searchModule.searchTxt.text = "";							}					}		private function search_resultReceive(event:IOEvent):void{						io.removeEventListener(IOEvent.SEARCH_RESULT, search_resultReceive);			var obj:Object = JSON.decode(event.result.toString());						var arr:Array = obj.jujiList;						backFromDetail = false;						coverList = [];						while(indexList.numChildren > 0){								indexList.removeChildAt(indexList.numChildren - 1);							}			if(currentState != CurrentPage.SEARCH_PAGE){								return;							}			var len:uint = arr.length;			for(var i:uint = 0; i<len; i++){								var indexCover:IndexCover = new IndexCover();								indexCover.addEventListener(IOEvent.SHOW_DETAIL_PAGE, showDetailPage);				indexList.addChild(indexCover);								indexCover.x = (i % 6) * (indexCover.width + 14) - indexLeft;				indexCover.y = Math.floor(i / 6) * (indexCover.height + 40) + 30;								coverList.push(indexCover);							}			indexList.width = indexCover.width * 6 + 70;			indexList.height = indexCover.height * 2 + 40;			TweenLite.to(indexList, .6, {scaleX:1, scaleY:1, alpha:1, x:stage.stageWidth/2 - indexList.width/2 + indexLeft + 5				, y: (stage.stageHeight - navBox.y) / 2 - indexList.height / 2 + navBox.y - 30				, onComplete:addSearchData, onCompleteParams:[arr]});			if(obj.totalPages > 1){								scrollModule.numPerPage = len;				scrollModule.totalPage = obj.totalPages;				scrollModule.visible = true;				TweenLite.to(scrollModule, .5, {x:stage.stageWidth/2 - SCROLL_MODULE_WIDTH /2, y:stage.stageHeight - 50, ease:Cubic.easeOut, alpha:1});							}					}		private function addSearchData(arr:Array):void{						loadingMC.alpha = 0;			var len:uint = arr.length;			for(var i:uint=0; i<len; i++){								var o:Object = arr[i]				var oo:IndexCover = coverList[i];								var coverURL:String = o.coverUrl;				var filmDesc:String = o.filmdesc;				var filmName:String = o.title.substr(0,3)+"...";				var filmScore:Number = o.score;				var vid:Number = o.id;								trace("addSearchData filmName:"+ filmName + ",hd:"+ o.hd);								oo.filmName = filmName;				oo.description = filmDesc;				oo.vid = vid;				oo.hd = o.hd;				oo.score = filmScore;				oo.coverURL = coverURL;							}			coverList = [];					}		/********************************************************************************************************/		private function navMouse_overHandler(event:MouseEvent):void{						var btn:MovieClip = event.target as MovieClip;			btn.gotoAndStop(2);					}		private function navMouse_outHandler(event:MouseEvent):void{						var btn:MovieClip = event.target as MovieClip;			btn.gotoAndStop(1);					}				private function getIndexData(event:IOEvent = null):void{			chub.myTrace("getIndexData");			listIndexFrame();			var urlVar:URLVariables = new URLVariables();			urlVar.m = "homePage";			io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, data_load_completeHandler);			io.getData(urlVar);					}				private function gotoIndexPage(event:MouseEvent):void{						if(currentState == CurrentPage.INDEX_PAGE){								return;							}			childCateObj = null;			this.addEventListener(IOEvent.MOTION_COMPLETE, getIndexPageData);			clearCurPage();			hideWidget();			currentState = CurrentPage.INDEX_PAGE;		}				private function getIndexPageData(event:IOEvent):void{						this.removeEventListener(IOEvent.MOTION_COMPLETE, getIndexPageData);			showLoadingIcon();			getIndexData();					}				private function gotoMoviePage(event:MouseEvent):void{						if(currentState == CurrentPage.MOVIE_PAGE){								return;							}			childCateObj = null;			this.addEventListener(IOEvent.MOTION_COMPLETE, getMoviePageData);			clearCurPage();			hideWidget();			cateMC.setCate(cateXML.channel.(@id == 1), 1);			currentState = CurrentPage.MOVIE_PAGE;					}		private function getMoviePageData(event:IOEvent):void{						this.removeEventListener(IOEvent.MOTION_COMPLETE, getMoviePageData);			listListFrame();			io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);			var urlVar:URLVariables = new URLVariables();			urlVar.m = "list";			urlVar.movieCategory = 1;			urlVar.pageIndex = 1;			urlVar.sort = 61;			showLoadingIcon();			io.getData(urlVar);					}		private function gotoTVPage(event:MouseEvent):void{						if(currentState == CurrentPage.TELEPLAY_PAGE){								return;							}			childCateObj = null;			this.addEventListener(IOEvent.MOTION_COMPLETE, getTVPageData);			clearCurPage();			hideWidget();			cateMC.setCate(cateXML.channel.(@id == 2), 1);			currentState = CurrentPage.TELEPLAY_PAGE;					}		private function getTVPageData(event:IOEvent):void{						this.removeEventListener(IOEvent.MOTION_COMPLETE, getTVPageData);			listListFrame();			io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);			var urlVar:URLVariables = new URLVariables();			urlVar.m = "list";			urlVar.movieCategory = 2;			urlVar.pageIndex = 1;			urlVar.sort = 61;			showLoadingIcon();			io.getData(urlVar);					}		private function gotoCTPage(event:MouseEvent):void{						if(currentState == CurrentPage.CARTOON_PAGE){								return;							}			childCateObj = null;			this.addEventListener(IOEvent.MOTION_COMPLETE, getCTPageData);			clearCurPage();			hideWidget();			cateMC.setCate(cateXML.channel.(@id == 3), 1);			currentState = CurrentPage.CARTOON_PAGE;					}		private function getCTPageData(event:IOEvent):void{						this.removeEventListener(IOEvent.MOTION_COMPLETE, getCTPageData);			listListFrame();			io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);			var urlVar:URLVariables = new URLVariables();			urlVar.m = "list";			urlVar.movieCategory = 3;			urlVar.pageIndex = 1;			showLoadingIcon();			io.getData(urlVar);					}		/******************************************************************************************/		private function gotoRWPage(event:MouseEvent):void{						if(currentState == CurrentPage.RECENTLY_WATCHED_PAGE){								return;							}			childCateObj = null;			this.addEventListener(IOEvent.MOTION_COMPLETE, getRWPageData);			clearCurPage();			hideWidget();			currentState = CurrentPage.RECENTLY_WATCHED_PAGE;					}		private function getRWPageData(event:IOEvent):void{						this.removeEventListener(IOEvent.MOTION_COMPLETE, getRWPageData);						listRWPage(1);					}		private function listRWPage(pid:uint):void{						backFromDetail = false;						coverList = [];						while(indexList.numChildren > 0){								indexList.removeChildAt(indexList.numChildren - 1);							}			if(currentState != CurrentPage.RECENTLY_WATCHED_PAGE){								return;							}			var arr:Array = this.getRecentlyWatchedByPid(pid);						var len:uint;			if(arr && arr.length){								len = arr.length							}else{								return;							}						for(var i:uint = 0; i<len; i++){								var indexCover:IndexCover = new IndexCover();								indexCover.addEventListener(IOEvent.SHOW_DETAIL_PAGE, showDetailPage);				indexList.addChild(indexCover);								indexCover.x = (i % 6) * (indexCover.width + 14) - indexLeft;				indexCover.y = Math.floor(i / 6) * (indexCover.height + 40) + 30;								coverList.push(indexCover);							}			indexList.width = indexCover.width * 6 + 70;			indexList.height = indexCover.height * 2 + 40;			TweenLite.to(indexList, .6, {scaleX:1, scaleY:1, alpha:1, x:stage.stageWidth/2 - indexList.width/2 + indexLeft + 5				, y: (stage.stageHeight - navBox.y) / 2 - indexList.height / 2 + navBox.y - 30				, onComplete:addRecentlyWatchedData, onCompleteParams:[len]});						if(recentlyWatchedPages > 1){								scrollModule.numPerPage = this.recentlyWatchedNumPerPage;				scrollModule.totalPage = this.recentlyWatchedPages;				scrollModule.visible = true;				TweenLite.to(scrollModule, .5, {x:stage.stageWidth/2 - SCROLL_MODULE_WIDTH/2, y:stage.stageHeight - 50, ease:Cubic.easeOut, alpha:1});							}					}		private function addRecentlyWatchedData(len:uint):void{						loadingMC.alpha = 0;						for(var i:uint=0; i<len; i++){								var o:Object = this.recentlyWatchedList[i]				var oo:IndexCover = coverList[i];								var coverURL:String = o[2];				var filmDesc:String = "";				var filmName:String = String(o[0]).substr(0,3)+"...";				//var filmScore:Number = o.score;				var vid:Number = i;								chub.myTrace("Recent:" + filmName);				oo.filmName = filmName;				oo.description = filmDesc;				oo.vid = vid;				//oo.score = filmScore;				oo.coverURL = coverURL;							}					}		/******************************************************************************************/		private function setBtn_clickHandler(event:MouseEvent):void{											}		private function closeBtn_clickHandler(event:MouseEvent):void{						ExternalInterface.call("cmd","closewindow",null); 					}		private function maxBtn_clickHandler(event:MouseEvent):void{						ExternalInterface.call("cmd","maxwindow2",null);					}		private function miniBtn_clickHandler(event:MouseEvent):void{						ExternalInterface.call("cmd","minwindow",null);					}		private function restoreBtn_clickHandler(event:MouseEvent):void{											}		private function updateInterface(event:Event):void{						bk.width = stage.stageWidth;			bk.height = stage.stageHeight;						/*topBar.width = stage.stageWidth;						btnBox.x = stage.stageWidth - btnBox.width;*/						loadingMC.x = stage.stageWidth / 2 - loadingMC.width / 2;			loadingMC.y = stage.stageHeight / 2 - loadingMC.height / 2;						searchModule.x = stage.stageWidth - 20 - searchModule.width;						cateMC.y = stage.stageHeight - cateMC.height - 50;						scrollModule.x = stage.stageWidth / 2 - 750 / 2;			if(!scrollModule.visible){								scrollModule.y = stage.stageHeight + 50;							}else{								scrollModule.y = stage.stageHeight - 50;							}						if(currentState == CurrentPage.DETAIL_PAGE){								detailPage.x = stage.stageWidth / 2 - detailPage.width / 2;				detailPage.y = stage.stageHeight / 2 - detailPage.height / 2 + 30;							}						if(currentState == CurrentPage.INDEX_PAGE || currentState == CurrentPage.RECENTLY_WATCHED_PAGE || currentState == CurrentPage.SEARCH_PAGE){								indexList.x = stage.stageWidth / 2 - indexList.width / 2 + indexLeft + 5;				indexList.y = (stage.stageHeight - navBox.y) / 2 - indexList.height / 2 + navBox.y - 30;							}						if(currentState == CurrentPage.MOVIE_PAGE || currentState == CurrentPage.TELEPLAY_PAGE || currentState == CurrentPage.CARTOON_PAGE){								listBox.x = (stage.stageWidth - cateWidth)/2 - (98 * 7 + 78) / 2 + cateWidth + cateMC.x;				listBox.y = stage.stageHeight/2 - (128 * 3 + 20) / 2;							}					}				private function listIndexFrame():void{						while(indexList.numChildren > 4){								indexList.removeChildAt(indexList.numChildren - 1);							}			chub.myTrace("currentState:" + currentState);						if(currentState != CurrentPage.INDEX_PAGE){								return;							}			backFromDetail = false;			coverList = [];			chub.myTrace("INDEX_FRAME_NUM ="+INDEX_FRAME_NUM);						for(var i:uint = 0; i < INDEX_FRAME_NUM; i++){								var indexCover:IndexCover = new IndexCover();								indexList.addChild(indexCover);								indexCover.x = (i % 6) * (indexCover.width + 14) - indexLeft;				indexCover.y = Math.floor(i / 6) * (indexCover.height + 40) + 30;								coverList.push(indexCover);							}			chub.myTrace("TweenLite to");			chub.myTrace("indexCover.width:" + indexCover.width);			chub.myTrace("indexCover.height:" + indexCover.height);						indexList.width = indexCover.width * 6 + 70;			indexList.height = indexCover.height * 2 + 40;						chub.myTrace("indexList.width:" + indexList.width);			chub.myTrace("indexList.height:" + indexList.height);			chub.myTrace("stage.stageWidth:" + stage.stageWidth);			chub.myTrace("indexLeft:" + indexLeft);						indexList.x = stage.stageWidth / 2 - indexList.width / 2 + indexLeft + 5;			indexList.y = navBox.y - 50;			chub.myTrace("indexList.x:" + indexList.x);			chub.myTrace("indexList.y:" + indexList.y);						TweenLite.to(indexList, .6, {scaleX:1, scaleY:1, alpha:1, x:stage.stageWidth/2 - indexList.width/2 + indexLeft + 5				, y: (stage.stageHeight - navBox.y) / 2 - indexList.height / 2 + navBox.y - 30});		}				//index page loaded				private function data_load_completeHandler(event:IOEvent):void{						io.removeEventListener(IOEvent.DATA_LOAD_COMPLETE, data_load_completeHandler);			loadingMC.alpha = 0;			if(!indexList.numChildren || !indexList){								listIndexFrame();							}			var obj:Object = JSON.decode(event.result.toString());			var hotList:Array = obj["hot"];			var newList:Array = obj["new"];			var arr:Array = hotList.concat(newList);			addMovieData(arr);			chub.myTrace("data_load_completeHandler");						/*var len:uint = arr.length;			for(var i:uint = 0; i<len; i++){								var indexCover:IndexCover = new IndexCover();								indexCover.addEventListener(IOEvent.SHOW_DETAIL_PAGE, showDetailPage);				indexList.addChild(indexCover);								indexCover.x = (i % 6) * (indexCover.width + 14) - indexLeft;				indexCover.y = Math.floor(i / 6) * (indexCover.height + 40) + 30;								coverList.push(indexCover);							}			indexList.width = indexCover.width * 6 + 70;			indexList.height = indexCover.height * 2 + 40;			indexList.x = stage.stageWidth / 2 - indexList.width / 2 + indexLeft + 5;			indexList.y = navBox.y - 50;			TweenLite.to(indexList, .6, {scaleX:1, scaleY:1, alpha:1, x:stage.stageWidth/2 - indexList.width/2 + indexLeft + 5				, y: (stage.stageHeight - navBox.y) / 2 - indexList.height / 2 + navBox.y - 30				, onComplete:addMovieData, onCompleteParams:[arr]});*/					}		private function addMovieData(arr:Array):void{						loadingMC.alpha = 0;			var len:uint = arr.length;			for(var i:uint=0; i<len; i++){								var o:Object = arr[i]				var oo:IndexCover = coverList[i];								oo.addEventListener(IOEvent.SHOW_DETAIL_PAGE, showDetailPage);								var coverURL:String = o.coverurl;				var filmDesc:String = o.filmdesc;				var filmName:String = o.title.substr(0,3)+"...";				var filmScore:Number = uint(o.totalScore / o.totalNum * 10) / 10;				var vid:Number = o.id;								oo.filmName = filmName;				oo.description = filmDesc;				oo.vid = vid;				oo.hd = o.gqSmart;				oo.score = filmScore;				oo.coverURL = coverURL;							}		}				private function listListFrame():void{						while(listBox.numChildren){								listBox.removeChildAt(listBox.numChildren - 1);							}			if(currentState != CurrentPage.MOVIE_PAGE && currentState != CurrentPage.TELEPLAY_PAGE && currentState != CurrentPage.CARTOON_PAGE){								return;							}			backFromDetail = false;			coverList = [];			addChild(listBox);						this.setChildIndex(this.cateMC, this.numChildren - 1);						for(var i:uint = 0; i < LIST_RAME_NUM; i++){								var listFrame:ListCover = new ListCover();								//listFrame.addEventListener(IOEvent.SHOW_DETAIL_PAGE, showDetailPage);				listBox.addChild(listFrame);								listFrame.x = ((i%7) * 2 - 3) * listFrame.width;				listFrame.y = - listFrame.height * 2 * (Math.floor(i/7)+1);				if(Math.floor(i/7) == 0){										listFrame.y = - listFrame.height * 3;									}				if(Math.floor(i/7) == 1){										listFrame.y = - listFrame.height * 2;									}				if(Math.floor(i/7) == 2){										listFrame.y = 420 + listFrame.height;									}				coverList.push(listFrame);								TweenLite.to(listFrame, .5, {x:(i%7)* (listFrame.width+13),					y:Math.floor(i/7) * (listFrame.height+10)+20, motionBlur:{strength:1, quality:1}, ease:Cubic.easeOut});							}			listBox.x = (stage.stageWidth - cateWidth)/2 - (98 * 7 + 78) / 2 + cateWidth + 10;			listBox.y = stage.stageHeight/2 - (128 * 3 + 20) / 2;					}				//list page loaded				private function listData_load_completeHandler(event:IOEvent):void{						io.removeEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);			loadingMC.alpha = 0;			if(!listBox.numChildren || !listBox){								listListFrame();							}						var obj:Object = JSON.decode(event.result.toString());			var arr:Array = obj["list"];			if(!arr.length){								this.hideLoadingIcon();				return;							}						cateMC.visible = true;			var totalPage:uint = obj["totalPage"];			scrollModule.totalPage = totalPage;			cateMC.addEventListener(IOEvent.CHILD_CATE, loadChildCate);			cateMC.addEventListener(IOEvent.ALL_MOVIE, loadAllMovie);			TweenLite.to(cateMC, .5, {x:10, ease:Cubic.easeOut, alpha:1});						if(totalPage > 1){								scrollModule.visible = true;				TweenLite.to(scrollModule, .5, {x:stage.stageWidth/2 - SCROLL_MODULE_WIDTH/2, y:stage.stageHeight - 50, ease:Cubic.easeOut, alpha:1});							}						var len:uint = arr.length;			currentNum = len;			addListMovieData(arr);		}		private function addListMovieData(arr:Array):void{						/*counter++;			if(counter < currentNum){								return;							}*/			loadingMC.alpha = 0;			var len:uint = arr.length;			for (var i:uint = 0; i < len; i++){								var o:Object = arr[i];				var oo:ListCover = coverList[i];								oo.addEventListener(IOEvent.SHOW_DETAIL_PAGE, showDetailPage);								var coverURL:String = o.coverurl;				var filmName:String = o.title.substr(0,3)+"...";				var filmScore:Number = uint(o.totalScore / o.totalNum * 10) / 10;				var vid:Number = o.id;								//trace("fileName:" + filmName + ",gqSmart:" + o.gqSmart );								oo.coverURL = coverURL;				oo.filmName = filmName;				oo.hd = o.gqSmart;				oo.score = filmScore;				oo.vid = vid;							}			//counter = 0;								}		// 子分类点击 全部 		private function loadAllMovie(event:IOEvent):void{						childCateObj = null;						if(!backFromDetail){								scrollModule.resetScrollModule();							}			listListFrame();			io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);			var urlVar:URLVariables = new URLVariables();			urlVar.m = "list";			switch(currentState){								case CurrentPage.MOVIE_PAGE:					urlVar.movieCategory = 1;					break;				case CurrentPage.TELEPLAY_PAGE:					urlVar.movieCategory = 2;					break;				case CurrentPage.CARTOON_PAGE:					urlVar.movieCategory = 3;					break;							}			urlVar.pageIndex = 1;			urlVar.sort = 61;			showLoadingIcon();			io.getData(urlVar);					}		// 加载子分类		private function loadChildCate(event:IOEvent):void{						var id:* = event.result.name;			var curT:uint = event.result.curType;			if(!backFromDetail){								scrollModule.resetScrollModule();							}			switch(currentState){								case CurrentPage.MOVIE_PAGE:										listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar:URLVariables = new URLVariables();					urlVar.m = "list";					urlVar.movieCategory = 1;					urlVar.pageIndex = 1;										switch(curT){												case 1:							urlVar.sort = id;							break;						case 2:							urlVar.movieArea = id;							break;						case 3:							urlVar.publishYear = id;							break;											}						urlVar.sortType = curT;					childCateObj = urlVar;					showLoadingIcon();					io.getData(urlVar);										break;				case CurrentPage.TELEPLAY_PAGE:										listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar:URLVariables = new URLVariables();					urlVar.m = "list";					urlVar.movieCategory = 2;					urlVar.pageIndex = 1;										switch(curT){												case 1:							urlVar.sort = id;							break;						case 2:							urlVar.movieArea = id;							break;						case 3:							urlVar.publishYear = id;							break;											}						urlVar.sortType = curT;					childCateObj = urlVar;					showLoadingIcon();					io.getData(urlVar);										break;				case CurrentPage.CARTOON_PAGE:										listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar:URLVariables = new URLVariables();					urlVar.m = "list";					urlVar.movieCategory = 3;					urlVar.pageIndex = 1;										switch(curT){												case 1:							urlVar.sort = id;							break;						case 2:							urlVar.movieArea = id;							break;						case 3:							urlVar.publishYear = id;							break;											}						urlVar.sortType = curT;					childCateObj = urlVar;					showLoadingIcon();					io.getData(urlVar);										break;							}					}				private function showDetailPage(event:IOEvent):void{						if(currentState == CurrentPage.RECENTLY_WATCHED_PAGE){								chub.CmdCall("proxyevent","listbtn","playhistory,"+event.result.vid);				return;							}			var urlVar:URLVariables = new URLVariables();			urlVar.m = event.result.m;			urlVar.fid = event.result.vid;			urlVar.hd = event.result.hd >=2 ? 1: 0 ;			curGQ = event.result.hd;			trace("showDetailPage urlVar.hd:"+urlVar.hd);			trace("showDetailPage event.result.hd:"+event.result.hd);			trace("showDetailPage fid:"+urlVar.fid);			trace("showDetailPage m:"+urlVar.m);			trace("curGQ:"+curGQ);						io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, detailPage_loadComplete_handler);			io.getData(urlVar);					}				private function detailPage_loadComplete_handler(event:IOEvent):void{						backFromDetail = true;						io.removeEventListener(IOEvent.DATA_LOAD_COMPLETE, detailPage_loadComplete_handler);			//trace(event.result.toString());			var obj:Object = JSON.decode(event.result.toString());						//chub.CmdCall("proxyevent","listbtn","setupfidimg,"+obj.id+"|"+obj.pic.substr(7));						detailPage.addEventListener(IOEvent.DETAIL_PAGE_READY, displayDetailPage);			obj.gqSmart = curGQ;			detailPage.addInfo(obj);					}		private function displayDetailPage(event:IOEvent):void{						if(currentState != CurrentPage.DETAIL_PAGE){								preStep.page = currentState;								if(currentState != CurrentPage.INDEX_PAGE){										this.hideWidget();					preStep.curPage = this.scrollModule.curPage;									}							}			detailPage.removeEventListener(IOEvent.DETAIL_PAGE_READY, displayDetailPage);			detailPage.addEventListener(IOEvent.NEXT_DETAIL_PAGE, displayNextDetailPage);			addChild(detailPage);			detailPage.addEventListener(IOEvent.PRE_STEP, backToPreStep);			detailPage.x = stage.stageWidth + 50;			detailPage.y = stage.stageHeight / 2 - detailPage.height / 2 + 30;						clearCurPage();						this.searchModule.visible = false;			//this.topBar.visible = false;			this.navBox.visible = false;						currentState = CurrentPage.DETAIL_PAGE;						TweenMax.to(bk, 1, {colorMatrixFilter:{brightness:0.2},blurFilter:{blurX:8, blurY:8}, onComplete:moveOutDetailPage});					}		private function displayNextDetailPage(event:IOEvent):void{						TweenLite.to(detailPage, .5, {x:-detailPage.width-50, ease:Cubic.easeInOut, onComplete:showNextDetailPage, onCompleteParams:[event.result]});					}		private function showNextDetailPage(o:Object):void{						detailPage.x = stage.stageWidth + 50;						var urlVar:URLVariables = new URLVariables();			urlVar.m = o.m;			urlVar.fid = o.vid;			urlVar.hd = o.hd;						this.showLoadingIcon();						io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, detailPage_loadComplete_handler);			io.getData(urlVar);								}		private function moveOutDetailPage():void{						this.hideLoadingIcon();			TweenLite.to(detailPage, .5, {x:stage.stageWidth/2-detailPage.width/2, ease:Cubic.easeOut});					}		private function backToPreStep(event:IOEvent):void{					TweenLite.to(detailPage, .6, {x:stage.stageWidth + 50, ease:Cubic.easeOut});			TweenMax.to(bk, 1, {colorMatrixFilter:{brightness:1},blurFilter:{blurX:0, blurY:0}});						currentState = preStep.page;						this.searchModule.visible = true;			//this.topBar.visible = true;			this.navBox.visible = true;						showLoadingIcon();			switch(currentState){								case CurrentPage.INDEX_PAGE:					getIndexData();					break;				case CurrentPage.MOVIE_PAGE:					listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar:URLVariables = new URLVariables();					urlVar.m = "list";					urlVar.movieCategory = 1;					urlVar.pageIndex = preStep.curPage;					urlVar.sort = 61;					if(childCateObj){												urlVar = childCateObj;						urlVar.pageIndex = preStep.curPage;											}					io.getData(urlVar);					break;				case CurrentPage.TELEPLAY_PAGE:					listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar:URLVariables = new URLVariables();					urlVar.m = "list";					urlVar.movieCategory = 2;					urlVar.pageIndex = preStep.curPage;					urlVar.sort = 61;					if(childCateObj){												urlVar = childCateObj;						urlVar.pageIndex = preStep.curPage;											}					io.getData(urlVar);					break;				case CurrentPage.CARTOON_PAGE:					listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar:URLVariables = new URLVariables();					urlVar.m = "list";					urlVar.movieCategory = 3;					urlVar.pageIndex = preStep.curPage;					//urlVar.sort = 61;										if(childCateObj){												urlVar = childCateObj;						urlVar.pageIndex = preStep.curPage;											}					io.getData(urlVar);					break;				case CurrentPage.SEARCH_PAGE:					var urlVar:URLVariables = new URLVariables();					urlVar.q = curSearchWord;					urlVar.p = preStep.curPage;										io.addEventListener(IOEvent.SEARCH_RESULT, search_resultReceive);					io.getSearchResult(urlVar);					break;				case CurrentPage.RECENTLY_WATCHED_PAGE:					this.getRecentlyWatchedByPid(urlVar.p);					break;							}					}					// flip page by the scroll module				private var tempPage:uint;				private function flipPage_handler(event:IOEvent):void{						tempPage = uint(event.result);			this.addEventListener(IOEvent.MOTION_COMPLETE, goFlipPage);			clearCurPage();					}		private function goFlipPage(event:IOEvent):void{						this.removeEventListener(IOEvent.MOTION_COMPLETE, goFlipPage);			switch(currentState){								case CurrentPage.MOVIE_PAGE:										currentState = CurrentPage.MOVIE_PAGE;					listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar:URLVariables = new URLVariables();					urlVar.m = "list";					urlVar.movieCategory = 1;					urlVar.pageIndex = tempPage;					urlVar.sort = 61;					if(childCateObj){												urlVar = childCateObj;						urlVar.pageIndex = tempPage;											}					showLoadingIcon();					io.getData(urlVar);										break;				case CurrentPage.TELEPLAY_PAGE:										currentState = CurrentPage.TELEPLAY_PAGE;					listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar1:URLVariables = new URLVariables();					urlVar1.m = "list";					urlVar1.movieCategory = 2;					urlVar1.pageIndex = tempPage;					urlVar1.sort = 61;					if(childCateObj){												urlVar = childCateObj;						urlVar.pageIndex = tempPage;											}					showLoadingIcon();					io.getData(urlVar1);										break;				case CurrentPage.CARTOON_PAGE:										currentState = CurrentPage.CARTOON_PAGE;					listListFrame();					io.addEventListener(IOEvent.DATA_LOAD_COMPLETE, listData_load_completeHandler);					var urlVar2:URLVariables = new URLVariables();					urlVar2.m = "list";					urlVar2.movieCategory = 3;					urlVar2.pageIndex = tempPage;					urlVar2.sort = 61;					if(childCateObj){												urlVar = childCateObj;						urlVar.pageIndex = tempPage;											}					showLoadingIcon();					io.getData(urlVar2);										break;								case CurrentPage.SEARCH_PAGE:										currentState = CurrentPage.SEARCH_PAGE;					var urlVar3:URLVariables = new URLVariables();					urlVar3.q = curSearchWord;					urlVar3.p = tempPage;										io.addEventListener(IOEvent.SEARCH_RESULT, search_resultReceive);					io.getSearchResult(urlVar3);										break;				case CurrentPage.RECENTLY_WATCHED_PAGE:					currentState = CurrentPage.RECENTLY_WATCHED_PAGE;					this.listRWPage(uint(tempPage));					break;							}					}				// show / hide the loading movie clip				private function showLoadingIcon():void{						TweenLite.to(loadingMC, .3, {alpha:1});					}		private function hideLoadingIcon():void{						TweenLite.to(loadingMC, .2, {alpha:0});					}				//clear current page				private function clearCurPage():void{									if(currentState == CurrentPage.INDEX_PAGE || currentState == CurrentPage.SEARCH_PAGE || currentState == CurrentPage.RECENTLY_WATCHED_PAGE){								if(!indexList.numChildren){										removeMovieData();					return;									}				for each(var oo:IndexCover in coverList){										oo.removeEventListener(IOEvent.SHOW_DETAIL_PAGE,showDetailPage);					oo.removeMaskMC();									}								TweenLite.to(indexList, .6, {scaleX:.8, scaleY:.8, alpha:0, y: navBox.y - 50, onComplete:removeMovieData});							}else{								if(!coverList.length){										this.dispatchEvent(new IOEvent(IOEvent.MOTION_COMPLETE));									}				for(var i:uint = 0; i < coverList.length; i++){										var o:ListCover = coverList[i];					o.removeEventListener(IOEvent.SHOW_DETAIL_PAGE,showDetailPage);					o.removeMaskMC();					var toY:int;					if(Math.floor(i/7) == 0){												toY = - o.height * 3;											}					if(Math.floor(i/7) == 1){												toY = - o.height * 2;											}					if(Math.floor(i/7) == 2){												toY = 420 + o.height;											}					TweenLite.to(o, .5, {x:((i%7) * 2 - 3) * o.width, y:toY, alpha:0, motionBlur:{strength:0.3, quality:1}, ease:Cubic.easeOut, onComplete:countForComplete});									}							}			coverList = [];					}		private function countForComplete():void{						counter++;			if(counter == currentNum){								while(listBox.numChildren){										listBox.removeAllChildren();									}				this.dispatchEvent(new IOEvent(IOEvent.MOTION_COMPLETE));				counter = 0;							}					}		private function hideWidget():void{						if(!backFromDetail){								scrollModule.resetScrollModule();							}			TweenLite.to(cateMC, .3, {x:-cateMC.width - 20, alpha:0});			TweenLite.to(scrollModule,.3,{x:stage.stageWidth/2 - SCROLL_MODULE_WIDTH/2, y:stage.stageHeight + 50, alpha:0, onComplete:hideScrollModule});					}		private function removeMovieData():void{						while(indexList.numChildren){								indexList.removeChildAt(indexList.numChildren - 1);							}			this.dispatchEvent(new IOEvent(IOEvent.MOTION_COMPLETE));			GC.gc();					}		// call by external function		private function hideTopBK():void{						//topBar.topBK.visible = false;					}		private function showTopBK():void{						//topBar.topBK.visible = true;					}		private function getRecentlyWatchedByPid(pid:uint):Array{						if(recentlyWatchedList && recentlyWatchedList.length){								var arr:Array = recentlyWatchedList.slice((pid - 1) * recentlyWatchedNumPerPage, 12 + (pid - 1) * recentlyWatchedNumPerPage);				return arr;							}			return null;					}		private function hideScrollModule():void{						scrollModule.visible = false;					}	}}